[
  {
    "name": "acm-certificate-expiration-check",
    "description": "ACM certificate set to expire within 30 days.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_acm_certificate with expiresOn < date.now + 30days",
        "version": "v1"
      }
    ],
    "alertLevel": "INFO"
  },
  {
    "name": "ec2-instances-in-vpc",
    "description": "EC2 instance not in a VPC.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_instance with vpcId=undefined",
        "version": "v1"
      }
    ],
    "alertLevel": "LOW"
  },
  {
    "name": "ec2-volume-inuse-check",
    "description": "Unused/unattached EBS volume.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_ebs_volume that !USES aws_instance",
        "version": "v1"
      }
    ],
    "alertLevel": "INFO"
  },
  {
    "name": "ec2-encrypted-volumes",
    "description": "Unencrypted EBS Volumes",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_instance as i that USES aws_ebs_volume with encrypted!=true as v return i.tag.AccountName, i.name, i.instanceId, i.state, i.region, i.webLink, v.volumeId, v.encrypted, v.webLink",
        "version": "v1"
      }
    ]
  },
  {
    "name": "ec2-restricted-ssh",
    "description": "Incoming SSH traffic for the security groups is accessible.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_security_group as sg that ALLOWS as rule * as src where rule.ingress=true and rule.ipProtocol='tcp' and rule.fromPort<=22 and rule.toPort>=22 return sg.displayName, rule.ipProtocol, rule.fromPort, rule.toPort, src.displayName, src.ipAddress, src.CIDR",
        "version": "v1"
      }
    ]
  },
  {
    "name": "iam-root-access-key-check",
    "description": "AWS account root user does not have MFA enabled.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_account with _source!='system-mapper' and AccountMFAEnabled!=1",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "iam-password-policy",
    "description": "AWS password policy does not meet organization's complexity, age and/or history requirements.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_iam_account_password_policy with requireUppercase != true or requireLowercase != true or requireSymbols != true or requireNumbers != true or minLength < 8 or maxAgeDays > 90 or historyCount < 12",
        "version": "v1"
      }
    ]
  },
  {
    "name": "iam-user-no-policies-check",
    "description": "AWS IAM user should have not direct/inline policy attachments. Users should inherit permissions from the assigned IAM groups or roles",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_iam_user that assigned (aws_iam_user_policy|aws_iam_policy)",
        "version": "v1"
      }
    ],
    "alertLevel": "LOW"
  },
  {
    "name": "lambda-function-settings-check-runtime-nodejs610",
    "description": "Node.js 6.10 is end of life (EOL) and should no longer be used.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_lambda_function with runtime='nodejs6.10'",
        "version": "v1"
      }
    ],
    "alertLevel": "MEDIUM"
  },
  {
    "name": "rds-db-instance-backup-enabled",
    "description": "RDS cluster or instance does not have back up enabled or the backup retention period is undefined.",
    "queries": [
      {
        "name": "query0",
        "query": "Find (aws_db_instance|aws_rds_cluster) with BackupRetentionPeriod=undefined",
        "version": "v1"
      }
    ]
  },
  {
    "name": "rds-snapshots-public-prohibited",
    "description": "RDS cluster or instance snapshots is public.",
    "queries": [
      {
        "name": "query0",
        "query": "Find (aws_db_instance|aws_rds_cluster) with public=true",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "rds-storage-encrypted",
    "description": "RDS cluster or instance storage encryption is not enabled.",
    "queries": [
      {
        "name": "query0",
        "query": "Find (aws_db_instance|aws_rds_cluster) with encrypted!=true",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "s3-bucket-public-read-prohibited",
    "description": "S3 buckets should not allow public read access unless it is tagged/classified as 'public'.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_s3_bucket with classification!='public' that ALLOWS as grant Everyone where grant.permission='READ'",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "s3-bucket-public-write-prohibited",
    "description": "S3 buckets should not allow public write access.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_s3_bucket that ALLOWS as grant Everyone where grant.permission='WRITE'",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "s3-bucket-public-acp-prohibited",
    "description": "S3 buckets should not allow public read/write access to the bucket ACL policy.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_s3_bucket that ALLOWS as grant Everyone where grant.permission='READ_ACP' or grant.permission='WRITE_ACP'",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "s3-bucket-replication-enabled",
    "description": "S3 buckets should enable cross-region replication.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_s3_bucket with replicationEnabled != true or destinationBuckets = undefined",
        "version": "v1"
      }
    ]
  },
  {
    "name": "s3-bucket-server-side-encryption-enabled",
    "description": "S3 buckets should enable have server-side encryption.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_s3_bucket with encrypted=false and defaultEncryptionEnabled=false",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "s3-bucket-logging-enabled",
    "description": "S3 buckets should enable access logging.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_s3_bucket with loggingEnabled != true",
        "version": "v1"
      }
    ]
  },
  {
    "name": "s3-bucket-versioning-enabled",
    "description": "S3 buckets should enable versioning.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_s3_bucket with versioningEnabled != true or mfaDelete != true",
        "version": "v1"
      }
    ]
  },
  {
    "name": "config-rule-noncompliant",
    "description": "AWS Config rule evaluation found non-compliant resource configurations.",
    "queries": [
      {
        "name": "query0",
        "query": "Find aws_config_rule with complianceState='NON_COMPLIANT'",
        "version": "v1"
      }
    ]
  }
]