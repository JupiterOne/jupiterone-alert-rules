[
  {
    "name": "aws-ability-to-create-a-new-policy-version",
    "description": "Users with the iam:CreatePolicyVersion permission can create a new version of an IAM policy that they have access to.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:createpolicyversion' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-change-the-default-policy-version-to-an-prior-version",
    "description": "Users with the iam:SetDefaultPolicyVersion permission may be able to escalate privileges through existing policy versions that are not currently in use.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:setdefaultpolicyversion' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "MEDIUM"
  },
  {
    "name": "aws-ability-to-create-a-user-access-key-for-another-user",
    "description": "Users with the iam:CreateAccessKey permission for other users can create an access key ID and secret access key belonging to another user in the AWS environment.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:createaccesskey' OR 'iam:*')\n  AND perm.resources !~=  User.username",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-ability-to-create-a-new-login-profile",
    "description": "Users with the iam:CreateLoginProfile permission for other users can create a password to login to the AWS console as any user that does not already have a login profile setup.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:createloginprofile' OR 'iam:*')\n  AND perm.resources !~=  User.username",
        "version": "v1"
      }
    ],
    "alertLevel": "MEDIUM"
  },
  {
    "name": "aws-ability-to-update-an-existing-login-profile",
    "description": "Users with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:updateloginprofile' OR 'iam:*')\n  AND perm.resources !~=  User.username",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-ability-to-attach-a-policy-to-a-user",
    "description": "Users with the iam:AttachUserPolicy permission can escalate privileges by attaching another policy to their user.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:attachuserpolicy' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-attach-a-policy-to-a-group",
    "description": "Users with the iam:AttachGroupPolicy permission can escalate privileges by attaching another policy to a group they are a part of.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:attachgrouppolicy' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-attach-a-policy-to-a-role",
    "description": "Users with the iam:AttachRolePolicy permission can escalate privileges by attaching another policy to a role that they have access to.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:attachrolepolicy' OR 'iam:*')\n  AND perm.normalizedActions ~= ('sts:assumerole' OR 'sts:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-create-or-update-an-inline-policy-for-a-user",
    "description": "Users with the iam:PutUserPolicy permission can escalate privileges by creating or updating an inline policy for a user that they have access to.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:putuserpolicy' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-create-or-update-an-inline-policy-for-a-group",
    "description": "Users with the iam:PutUserPolicy permission can escalate privileges by creating or updating an inline policy for a group that they are a part of.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:putgrouppolicy' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-create-or-update-an-inline-policy-for-a-role",
    "description": "Users with the iam:PutRolePolicy permission can escalate privileges by creating or updating an inline policy for a role that they have access to",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:putrolepolicy' OR 'iam:*')\n  AND perm.normalizedActions ~= ('sts:assumerole' OR 'sts:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-add-a-user-to-a-group",
    "description": "Users with the iam:AddUserToGroup permission can use it to add themselves to an existing IAM Group in the AWS account.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:addusertogroup' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-ability-to-update-the-assumerolepolicydocument-of-a-role",
    "description": "Users with the iam:UpdateAssumeRolePolicy and sts:AssumeRole permissions would be able to change the assume role policy document of any existing role to allow them to assume that role.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:updateassumerolepolicy' OR 'iam:*')\n  AND perm.normalizedActions ~= ('sts:assumerole' OR 'sts:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-update-the-code-of-an-existing-lambda-function",
    "description": "A user with the lambda:UpdateFunctionCode permission could update the code in an existing Lambda function with an IAM role attached so that it would import the relevant AWS library in that programming language and use it to perform actions on behalf of that role.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_lambda\nWHERE perm.normalizedActions ~= ('lambda:updatefunctioncode' OR 'lambda:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-update-an-existing-glue-dev-endpoint",
    "description": "A user with the glue:UpdateDevEndpoint permission would be able to update the associated SSH public key of an existing Glue development endpoint, to then SSH into it and have access to the permissions the attached role has access to.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_glue\nWHERE perm.normalizedActions ~= ('glue:updatedevendpoint' OR 'glue:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-ability-to-create-a-codestar-project-and-associate-as-project-owner",
    "description": "Users with the codestar:CreateProject and codestar:AssociateTeamMember permissions can create a new CodeStar project and associate themselves as an Owner of the project. This will attach a new policy to the user that provides access to numerous permissions for AWS services.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_codestar\nWHERE perm.normalizedActions ~= 'codestar:*' OR perm.normalizedActions ~= ('codestar:CreateProject' AND 'codestar:AssociateTeamMember')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-remove-permissions-boundary-from-a-role",
    "description": "Users with the iam:DeleteRolePermissionsBoundary permission can remove a permissions boundary from a role they have access to, which may increase the role's effective permissions if the permissions boundary is more restrictive than any of the role's identity-based policies.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:deleterolepermissionsboundary' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-delete-an-inline-policy-from-a-role",
    "description": "Users with the iam:DeleteRolePolicy permission can delete an inline policy from a role they have access to, which may increase the role's effective permissions if the policy contains explicit deny statements allowed by any of the role's other policies.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:deleterolepolicy' OR 'iam:*')\n  AND perm.normalizedActions ~= ('sts:assumerole' OR 'sts:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-delete-an-inline-policy-from-a-user",
    "description": "Users with the iam:DeleteUserPolicy permission can delete an inline policy from a user they have access to, which may increase the user's effective permissions if the policy contains explicit deny statements allowed by any of the user's other policies. ",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:deleteuserpolicy' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-remove-a-managed-policy-from-a-user",
    "description": "Users with the iam:DetachUserPolicy permission can remove a managed policy from a user they have access to, which may increase the role's effective permissions if the policy contains explicit deny statements allowed by any of the role's other policies.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:detachuserpolicy' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-update-a-permissions-boundary-attached-to-a-user",
    "description": "Users with the iam:PutUserPermissionsBoundary can update a permissions boundary attached to a user they have access to, which may increase the user's effective permissions if the permissions boundary is more restrictive than any of the role's identity-based policies.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:putuserpermissionsboundary' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-ability-to-modify-an-existing-lambda-functions-configuration",
    "description": "Users with the lambda:UpdateFunctionConfiguration permission can modify an existing Lambda function's configuration to add a new Lambda layer, allowing the user to override an existing library and allow them to execute malicious code under the privilege of the role associated with the Lambda function.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_lambda\nWHERE perm.normalizedActions ~= ('lambda:updatefunctionconfiguration' OR 'lambda:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-remove-a-managed-policy-from-a-role",
    "description": "Users with the iam:DetachRolePolicy permission can remove a managed policy from a role they have access to, which may increase the role's effective permissions if the policy contains explicit deny statements allowed by any of the role's other policies.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:detachrolepolicy' OR 'iam:*')\n  AND perm.normalizedActions ~= ('sts:assumerole' OR 'sts:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "CRITICAL"
  },
  {
    "name": "aws-ability-to-update-a-permissions-boundary-attached-to-a-role",
    "description": "A user with the iam:PutRolePermissionsBoundary can update a permissions boundary attached to a role they have access to, which may increase the role's effective permissions if the permissions boundary is more restrictive than any of the role's identity-based policies.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User\n  (THAT HAS aws_iam_group)?\n  (THAT ASSIGNED aws_iam_role)?\n  (THAT TRUSTS << aws_iam_role)?\n  THAT ASSIGNED AccessPolicy\n  THAT ALLOWS as perm aws_iam\nWHERE perm.normalizedActions ~= ('iam:putrolepermissionsboundary' OR 'iam:*')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-high-privilege-lambda-function-wildcard",
    "description": "This query looks for lambda functions that have the action of 'anything' on 'any' resources. This is considered overly permissive and it is recommended to review all returned entities to ensure the principle of least privilege is being followed.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND aws_lambda as lambda THAT HAS aws_lambda_function (THAT (ASSIGNED|ALLOWS) as perm aws_iam_role)? WHERE perm.actions ~= '*' AND perm.resources ~= '*'",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-high-privilege-lambda-function-lambda:*",
    "description": "This query looks for lambda functions that have the action of lambda:*. This is considered overly permissive and it is recommended to review all returned entities to ensure the principle of least privilege is being followed.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND aws_lambda as lambda THAT HAS aws_lambda_function (THAT (ASSIGNED|ALLOWS) as perm aws_iam_role)? WHERE perm.normalizedActions ~= 'lambda:*'",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-high-privilege-lambda-function-get-policy",
    "description": "This query looks for users that have the 'lambda:get-policy' action assigned. A malicious actor with this permission can view environmental variables inluding improperly stored secrets in a lambda function and it is recommended to review all results.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User (THAT HAS aws_iam_group)? (THAT ASSIGNED aws_iam_role)? (THAT TRUSTS << aws_iam_role)? THAT ASSIGNED AccessPolicy THAT ALLOWS as perm aws_lambda WHERE perm.normalizedActions ~= ('lambda:get-policy')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-high-privilege-lambda-function-get-function",
    "description": "This query looks for users that have the 'lambda:get-function' action assigned. A malicious actor with this permission can view environmental variables inluding improperly stored secrets in a lambda function and it is recommended to review all results.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User (THAT HAS aws_iam_group)? (THAT ASSIGNED aws_iam_role)? (THAT TRUSTS << aws_iam_role)? THAT ASSIGNED AccessPolicy THAT ALLOWS as perm aws_lambda WHERE perm.normalizedActions ~= ('lambda:get-function')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-high-privilege-lambda-function-get-function",
    "description": "This query looks for users that have the 'lambda:GetFunctionConfiguration' action assigned. A malicious actor with this permission can view environmental variables inluding improperly stored secrets in a lambda function and it is recommended to review all results.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User (THAT HAS aws_iam_group)? (THAT ASSIGNED aws_iam_role)? (THAT TRUSTS << aws_iam_role)? THAT ASSIGNED AccessPolicy THAT ALLOWS as perm aws_lambda WHERE perm.normalizedActions ~= ('lambda:GetFunctionConfiguration')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  },
  {
    "name": "aws-high-privilege-lambda-function-list-function",
    "description": "This query looks for users that have the 'lambda:ListFunctions' action assigned. A malicious actor with this permission can view environmental variables inluding improperly stored secrets in a lambda function and it is recommended to review all results.",
    "queries": [
      {
        "name": "query0",
        "query": "FIND User (THAT HAS aws_iam_group)? (THAT ASSIGNED aws_iam_role)? (THAT TRUSTS << aws_iam_role)? THAT ASSIGNED AccessPolicy THAT ALLOWS as perm aws_lambda WHERE perm.normalizedActions ~= ('lambda:ListFunctions')",
        "version": "v1"
      }
    ],
    "alertLevel": "HIGH"
  }
]
